{"version":3,"sources":["core/utils.js","core/sodukuGenerator.js","core/soduku.js","core/check.js","layout/grid.js","layout/popUp.js","index.js"],"names":["makeMatrix","v","Array","from","length","fill","shuffle","array","i","j","Math","floor","random","generateSoduku","matrix","randomColumnIndex","generateSodu","map","row","n","fillNumber","fillRow","rowIndex","columns","colIndex","fillable","num","column","boxIndex","convertToBoxIndex","boxNumbers","getBoxCells","generate","console","log","cellIndex","convertToMatrixIndex","boxStartRow","boxStartCol","result","push","sodukuFactory","solutionMatrix","produce","difficulty","puzzleMatrix","cell","checkArray","marks","value","checker","matrixMarks","check","success","checkRows","checkCols","cols","checkBoxes","box","every","mark","grid","container","reset","querySelectorAll","forEach","span","classList","remove","textContent","add","nodeList","children","data","parseInt","checkMatrix","contains","build","rowClass","colClass","rowContainer","document","createElement","cellSpan","innerHTML","appendChild","bindPopUp","popUp","addEventListener","e","handleShowPop","target","show","clear","adjustLayout","querySelector","width","offsetWidth","style","height","lineHeight","_cell","handleFillIn","popUpCell","unsureCell","goodCell","markUnsure","markGood","markEmpty","bindClicks","sodukuBoard","gridContainer","getElementById","popUpElem","startGame","restartBtn","checkBtn","resetBtn","clearBtn","startPlay","restart","isTrusted","alert"],"mappings":";AAmBC,aAjBD,SAASA,IAAWC,IAAAA,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACfC,OAAAA,MAAMC,KAAK,CAAEC,OAAQ,GAAK,WAAMF,OAAAA,MAAM,GAAGG,KAAKJ,KAUvD,SAASK,EAAQC,GACV,IAAA,IAAIC,EAAID,EAAMH,OAAS,EAAGI,EAAI,EAAGA,IAAK,CACnCC,IAAAA,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACnB,EAAA,CAACD,EAAME,GAAIF,EAAMC,IAAvCD,EAAMC,GAFkC,EAAA,GAE9BD,EAAME,GAFwB,EAAA,GAIpCF,OAAAA,EACR,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,QAAA,QAAA;;AC8GA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,QAAA,YAAA,EAAA,QAAA,qBAAA,EAjID,IAAA,EAAA,QAAA,WAMA,SAASM,IACHC,IAAAA,EACAC,EAcKC,SAAAA,IACPF,GAAS,EAAT,EAAA,cACAC,GAAoB,EACjBE,EAAAA,cAAAA,IAAI,SAACC,GAAQA,OAAAA,EAAID,IAAI,SAAChB,EAAGO,GAAMA,OAAAA,MAC/BS,IAAI,SAACC,GAAQ,OAAA,EAAQA,EAAAA,SAAAA,KACnB,IAAA,IAAIC,EAAI,EAAGA,GAAK,EAAGA,IAClB,IAACC,EAAWD,GACP,OAAA,EAGJ,OAAA,EASAC,SAAAA,EAAWD,GACXE,OAUAA,SAAAA,EAAQF,EAAGG,GAEdA,GAAAA,EAAW,EACN,OAAA,EAGHJ,IAAAA,EAAMJ,EAAOQ,GACbC,IAAAA,EAAUR,EAAkBO,GAC7B,IAAA,IAAId,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpBgB,IAAAA,EAAWD,EAAQf,GAErBU,IAAAA,EAAIM,IAOHC,EAASX,EAAQK,EAAGG,EAAUE,GAA/B,CAMA,GAFJN,EAAIM,GAAYL,EAEXE,EAAQF,EAAGG,EAAW,GAKpB,OAAA,EAHLJ,EAAIM,GAAY,GAKb,OAAA,EAzCAH,CAAQF,EAAG,GA4CXM,SAAAA,EAASX,EAAQY,EAAKJ,EAAUE,GAKlC,IAJCN,IAAAA,EAAMJ,EAAOQ,GACbK,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGV,IAAI,SAAChB,GAAMa,OAAAA,EAAOb,GAAGuB,KACxDI,EAAaC,EAAkBP,EAAUE,GAAzCI,SACFE,EAAaC,EAAYjB,EAAQc,GAC9BpB,EAAI,EAAGA,EAAI,EAAGA,IACjBU,GAAAA,EAAIV,KAAOkB,GAAOC,EAAOnB,KAAOkB,GAAOI,EAAWtB,KAAOkB,EACpD,OAAA,EAGJ,OAAA,EAGF,MAAA,CACLZ,OAAAA,EACAkB,SAtFOA,WACA,MAAChB,KACNiB,QAAQC,IAAI,aAEPpB,OAAAA,IAsFX,SAASe,EAAkBP,EAAUE,GAC5B,MAAA,CACLI,SAAqC,EAA3BlB,KAAKC,MAAMW,EAAW,GAASZ,KAAKC,MAAMa,EAAW,GAC/DW,UAAYb,EAAW,EAAK,EAAKE,EAAW,GAIhD,SAASY,EAAqBR,EAAUO,GAC/B,MAAA,CACLb,SAAqC,EAA3BZ,KAAKC,MAAMiB,EAAW,GAASlB,KAAKC,MAAMwB,EAAY,GAChEX,SAAWI,EAAW,EAAK,EAAKO,EAAY,GAIhD,SAASJ,EAAYjB,EAAQc,GAItB,IAHCS,IAAAA,EAAyC,EAA3B3B,KAAKC,MAAMiB,EAAW,GACpCU,EAAeV,EAAW,EAAK,EACjCW,EAAS,GACJ/B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACtBc,IAAAA,EAAWe,EAAc3B,KAAKC,MAAMH,EAAI,GACxCgB,EAAWc,EAAe9B,EAAI,EAClC+B,EAAOC,KAAK1B,EAAOQ,GAAUE,IAExBe,OAAAA;;AC9GR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAlBD,IAAA,EAAA,QAAA,qBAEA,SAASE,IACHC,IAAAA,GAAiB,EAAiBV,EAAAA,kBAAAA,WAY/B,MAAA,CACLW,QAVOA,WAAQC,IAAAA,EAAa,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAMrBC,OALQH,EAAezB,IAAI,SAACC,GAC1BA,OAAAA,EAAID,IAAI,SAAC6B,GACPpC,OAAgB,EAAhBA,KAAKE,SAAegC,EAAa,EAAIE;;ACyEnD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAAA,QAAA,WAAA,EAlFD,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,qBAGA,SAASC,EAAWxC,GAGb,IAFCH,IAAAA,EAASG,EAAMH,OACjB4C,EAAQ9C,MAAM,GAAGG,MAAK,GACjBG,EAAI,EAAGA,EAAIJ,EAAQI,IACtB,GAACwC,EAAMxC,GAAP,CACEyC,IAAAA,EAAQ1C,EAAMC,GAChB,GAACyC,EAIA,IAAA,IAAIxC,EAAID,EAAI,EAAGC,EAAIL,EAAQK,IAC1BwC,IAAU1C,EAAME,KAClBuC,EAAMxC,GAAKwC,EAAMvC,IAAK,QALxBuC,EAAMxC,IAAK,EASRwC,OAAAA,EAGT,SAASE,EAAQpC,GACXqC,IAAAA,GAAc,EAAW,EAAA,aAAA,GAsDtB,MAAA,CACLC,MApDOA,WAKAC,OAGAC,WACF,IAAA,IAAI9C,EAAI,EAAGA,EAAI,EAAGA,IAGhB,IAFCU,IAAAA,EAAMJ,EAAON,GACbwC,EAAQD,EAAW7B,GAChBT,EAAI,EAAGA,EAAI,EAAGA,IAChBuC,EAAMvC,KACT0C,EAAY3C,GAAGC,IAAK,GAb1B6C,GAmBOC,WACF,IAAA,IAAI/B,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAE1C,IADCgC,IAAAA,EAAO,GACJlC,EAAW,EAAGA,EAAW,EAAGA,IACnCkC,EAAKlC,GAAYR,EAAOQ,GAAUE,GAI/B,IADCwB,IAAAA,EAAQD,EAAWS,GAChBlC,EAAW,EAAGA,EAAW,EAAGA,IAC9B0B,EAAM1B,KACT6B,EAAY7B,GAAUE,IAAY,IA5BxC+B,GAkCOE,WACF,IAAA,IAAI7B,EAAW,EAAGA,EAAW,EAAGA,IAG9B,IAFC8B,IAAAA,GAAM,EAAY5C,EAAAA,aAAAA,EAAQc,GAC1BoB,EAAQD,EAAWW,GAChBvB,EAAY,EAAGA,EAAY,EAAGA,IACjC,IAACa,EAAMb,GAAY,CACU,IAAA,GAAA,EAC7BP,EAAAA,sBAAAA,EACAO,GAFMb,EAAAA,EAAAA,SAAUE,EAAAA,EAAAA,SAIlB2B,EAAY7B,GAAUE,IAAY,GA3CxCiC,GACUN,EAAYQ,MAAM,SAACzC,GAAQA,OAAAA,EAAIyC,MAAM,SAACC,GAASA,OAAAA,OAiDzDT,YAAAA;;ACiBJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,QAAA,UAAA,EAjGA,IAAA,EAAA,QAAA,kBACA,EAAA,QAAA,iBAgGA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAxFA,IAAMU,EAAO,SAASC,GA2Eb,MAAA,CACLC,MAnCOA,WACUD,EAAUE,iBAAiB,mBACjCC,QAAQ,SAACC,GAClBA,EAAKC,UAAUC,OAAO,QAAS,cAAe,aAC9CF,EAAKG,YAAc,EACnBH,EAAKC,UAAUG,IAAI,YA+BrBlB,MA3BOA,WACHmB,IAAAA,EAAW,EAAIT,EAAUU,UAAUvD,IAAI,SAACC,GAAYA,OAAAA,EAAAA,EAAIsD,YACxDC,EAAOF,EAAStD,IAClB,SAACC,GAAQA,OAAAA,EAAID,IAAI,SAAC6B,GAAS4B,OAAAA,SAAS5B,EAAKuB,gBAAiB,IAEtDjB,GAAQ,EAAQqB,EAAAA,SAAAA,GAClBrB,GAAAA,EAAMA,QACD,OAAA,EAEHuB,IAAAA,EAAcvB,EAAMD,YAE1BoB,EAASN,QAAQ,SAAC/C,EAAKI,GACrBJ,OAAAA,EAAI+C,QAAQ,SAACnB,EAAMtB,GAEfsB,EAAKqB,UAAUS,SAAS,SACxBD,EAAYrD,GAAUE,GAEtBsB,EAAKqB,UAAUC,OAAO,SAEtBtB,EAAKqB,UAAUG,IAAI,cASzBO,MA7EOA,WACD/D,IAAAA,GAAS,EAAgB6B,EAAAA,iBAAAA,UACzBmC,EAAW,CAAC,UAAW,aAAc,cACrCC,EAAW,CAAC,UAAW,aAAc,aAC7BjE,EAAOG,IAAI,SAACC,EAAKI,GACvB0D,IAAAA,EAAeC,SAASC,cAAc,OAUrCF,OATPA,EAAab,UAAUG,IAAI,OAC3BU,EAAab,UAAUG,IAAIQ,EAASxD,EAAW,IAC/CJ,EAAI+C,QAAQ,SAACnB,EAAMX,GACXgD,IAAAA,EAAWF,SAASC,cAAc,QACxCC,EAAShB,UAAUG,IAAIS,EAAS5C,EAAY,IAC5CW,EAAOqC,EAAShB,UAAUG,IAAI,QAAUa,EAAShB,UAAUG,IAAI,SAC/Da,EAASC,UAAYtC,EACrBkC,EAAaK,YAAYF,KAEpBH,IAEH/D,IAAI,SAACC,GACT4C,EAAUuB,YAAYnE,MA4DxBoE,UA1COA,SAAUC,GACjBzB,EAAU0B,iBAAiB,QAAS,SAACC,GAAMC,OAVpCA,SAAcD,EAAGF,GAClBzC,IAAAA,EAAO2C,EAAEE,OACX7C,EAAKqB,UAAUS,SAAS,UAG5B9B,EAAKqB,UAAUG,IAAI,UACnBiB,EAAMK,KAAK9C,IAIgC4C,CAAcD,EAAGF,MA0C5DM,MAzDOA,WACP/B,EACGE,iBAAiB,cACjBC,QAAQ,SAACnB,GAASA,OAAAA,EAAKqB,UAAUC,OAAO,cA8D/C,QAAA,KAAA,EAAA,IAAM0B,EAAe,WACbhC,IAAAA,EAAYmB,SAASc,cAAc,cACnCC,EAAQlC,EAAUiC,cAAc,QAAQE,YAC7BnC,EAAUE,iBAAiB,QACnCC,QAAQ,SAACC,GAChBA,EAAKgC,MAAMC,OAASH,EAAQ,KAC5B9B,EAAKgC,MAAME,WAAaJ,EAAQ,QANpC,QAAA,aAAA;;AC1CC,aAvDc,SAAST,EAAMA,GACxBc,IAAAA,EAMKC,SAAAA,EAAab,GACdc,IAAAA,EAAYd,EAAEE,OAChBa,EAAaH,EAAMlC,UAAUS,SAAS,eACtC6B,EAAWJ,EAAMlC,UAAUS,SAAS,aAElC8B,EAAaH,EAAUpC,UAAUS,SAAS,eAC1C+B,EAAWJ,EAAUpC,UAAUS,SAAS,aACxCgC,EAAYL,EAAUpC,UAAUS,SAAS,cAE3C8B,EACEF,EACFH,EAAMlC,UAAUC,OAAO,gBAEvBqC,GAAYJ,EAAMlC,UAAUC,OAAO,aACnCiC,EAAMlC,UAAUG,IAAI,gBAIfqC,EACHF,EACFJ,EAAMlC,UAAUC,OAAO,cAEvBoC,GAAcH,EAAMlC,UAAUC,OAAO,eACrCiC,EAAMlC,UAAUG,IAAI,cAIfsC,GACPJ,GAAcH,EAAMlC,UAAUC,OAAO,eACrCqC,GAAYJ,EAAMlC,UAAUC,OAAO,aACnCiC,EAAMhC,YAAc,EACpBgC,EAAMlC,UAAUG,IAAI,WAIpB+B,EAAMhC,YAAckC,EAAUlC,YAC9BgC,EAAMlC,UAAUC,OAAO,UAEzBmB,EAAMpB,UAAUG,IAAI,UACpB+B,EAAMlC,UAAUC,OAAO,UAKlB,MAAA,CACLwB,KAlDOA,SAAK9C,GACZyC,EAAMpB,UAAUC,OAAO,UACvBiC,EAAQvD,GAiDR+D,WALOA,WACPtB,EAAMC,iBAAiB,QAASc,KAMnC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACbD,aA1CA,IAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,mBAyCA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAvCA,IAGIQ,EAHEC,EAAgB9B,SAAS+B,eAAe,aACxCC,EAAYhC,SAAS+B,eAAe,SACpCE,EAAYjC,SAASc,cAAc,iBAGnCR,GAAQ,EAAa0B,EAAAA,SAAAA,GACrBE,EAAalC,SAAS+B,eAAe,WACrCI,EAAWnC,SAAS+B,eAAe,SACnCK,EAAWpC,SAAS+B,eAAe,SACnCM,EAAWrC,SAAS+B,eAAe,SAEzC,SAASO,EAAU9B,GAAG+B,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACzB/B,EAAEgC,WAIHD,IAAST,EAAc3B,UAAY,MACvC8B,EAAU/C,UAAUG,IAAI,WACxBwC,GAAc,EAAKC,EAAAA,MAAAA,IACPlC,SACZ,EAAA,EAAA,gBACAiC,EAAYxB,UAAUC,GACtBA,EAAMsB,cATJa,MAAM,qBAYVR,EAAU1B,iBAAiB,QAAS+B,GAGpCJ,EAAW3B,iBAAiB,QAAS,SAACC,GAAM8B,OAAAA,EAAU9B,GAAG,KACzD2B,EAAS5B,iBAAiB,QAAS,SAACC,GAC9BqB,EAAY1D,UACdsE,MAAM,oBACNZ,EAAYS,UAAU9B,GAAG,IAE3BqB,EAAY1D,UAEdiE,EAAS7B,iBAAiB,QAAS,WACjCsB,EAAY/C,UAEduD,EAAS9B,iBAAiB,QAAS,WAAMsB,OAAAA,EAAYjB","file":"sodukuJS.b73a4f58.map","sourceRoot":"..","sourcesContent":["//create a matrix representing the soduku\r\n\r\nfunction makeMatrix(v = 0) {\r\n  return Array.from({ length: 9 }, () => Array(9).fill(v));\r\n}\r\n\r\n/**\r\n * Fisher Yates shuffle algorithm\r\n * The Fisher-Yates algorithm works by picking one random element for each\r\n * original array element\r\n * @param {array} array\r\n * @returns {array} shuffled array\r\n */\r\nfunction shuffle(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nexport { makeMatrix, shuffle };\r\n","import { makeMatrix, shuffle } from './utils';\r\n\r\n/**\r\n * Function for generating the soduku with number filled\r\n *\r\n */\r\nfunction generateSoduku() {\r\n  let matrix;\r\n  let randomColumnIndex;\r\n\r\n  /**\r\n   * Entry point for generating the soduku\r\n   *\r\n   */\r\n\r\n  function generate() {\r\n    while (!generateSodu()) {\r\n      console.log('try again');\r\n    }\r\n    return matrix;\r\n  }\r\n\r\n  function generateSodu() {\r\n    matrix = makeMatrix();\r\n    randomColumnIndex = makeMatrix()\r\n      .map((row) => row.map((v, i) => i))\r\n      .map((row) => shuffle(row));\r\n    for (let n = 1; n <= 9; n++) {\r\n      if (!fillNumber(n)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * fill the empty soduku with correct number, we fill the number for each row\r\n   * with a certain number till the final row.\r\n   *\r\n   * @param {Number} n number to be filled\r\n   */\r\n  function fillNumber(n) {\r\n    return fillRow(n, 0);\r\n  }\r\n\r\n  /**\r\n   * Fill the number in a correct place in a row without repeating(in a row ,in\r\n   * a column and in a box)\r\n   *\r\n   * @param {Number} n number to fit in\r\n   * @param {Number} rowIndex the index of the row to be filled\r\n   */\r\n  function fillRow(n, rowIndex) {\r\n    // base case, we fill all the box successfully\r\n    if (rowIndex > 8) {\r\n      return true;\r\n    }\r\n\r\n    const row = matrix[rowIndex];\r\n    const columns = randomColumnIndex[rowIndex];\r\n    for (let i = 0; i < 9; i++) {\r\n      const colIndex = columns[i];\r\n      // if this column already has a number filled\r\n      if (row[colIndex]) {\r\n        continue;\r\n      }\r\n      /**\r\n       * check if we could fill n in this cell, we could fill the number in if\r\n       * there is no same number in this row,in this column and in this box\r\n       */\r\n      if (!fillable(matrix, n, rowIndex, colIndex)) {\r\n        continue;\r\n      }\r\n      //we could fill n in\r\n      row[colIndex] = n;\r\n      // if we could not fill n in the next row, we need take one step back\r\n      if (!fillRow(n, rowIndex + 1)) {\r\n        //reset the\r\n        row[colIndex] = 0;\r\n        continue;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function fillable(matrix, num, rowIndex, colIndex) {\r\n    const row = matrix[rowIndex];\r\n    const column = [0, 1, 2, 3, 4, 5, 6, 7, 8].map((v) => matrix[v][colIndex]);\r\n    const { boxIndex } = convertToBoxIndex(rowIndex, colIndex);\r\n    const boxNumbers = getBoxCells(matrix, boxIndex);\r\n    for (let i = 0; i < 9; i++) {\r\n      if (row[i] === num || column[i] === num || boxNumbers[i] === num) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return {\r\n    matrix,\r\n    generate,\r\n  };\r\n}\r\n\r\nfunction convertToBoxIndex(rowIndex, colIndex) {\r\n  return {\r\n    boxIndex: Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3),\r\n    cellIndex: (rowIndex % 3) * 3 + (colIndex % 3),\r\n  };\r\n}\r\n\r\nfunction convertToMatrixIndex(boxIndex, cellIndex) {\r\n  return {\r\n    rowIndex: Math.floor(boxIndex / 3) * 3 + Math.floor(cellIndex / 3),\r\n    colIndex: (boxIndex % 3) * 3 + (cellIndex % 3),\r\n  };\r\n}\r\n\r\nfunction getBoxCells(matrix, boxIndex) {\r\n  const boxStartRow = Math.floor(boxIndex / 3) * 3;\r\n  const boxStartCol = (boxIndex % 3) * 3;\r\n  let result = [];\r\n  for (let i = 0; i < 9; i++) {\r\n    let rowIndex = boxStartRow + Math.floor(i / 3);\r\n    let colIndex = boxStartCol + (i % 3);\r\n    result.push(matrix[rowIndex][colIndex]);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport { generateSoduku, getBoxCells, convertToMatrixIndex };\r\n","import { generateSoduku } from './sodukuGenerator';\r\n\r\nfunction sodukuFactory() {\r\n  let solutionMatrix = generateSoduku().generate();\r\n  let puzzleMatrix;\r\n\r\n  function produce(difficulty = 5) {\r\n    puzzleMatrix = solutionMatrix.map((row) => {\r\n      return row.map((cell) => {\r\n        return Math.random() * 9 < difficulty ? 0 : cell;\r\n      });\r\n    });\r\n    return puzzleMatrix;\r\n  }\r\n\r\n  return {\r\n    produce,\r\n  };\r\n}\r\n\r\nexport { sodukuFactory };\r\n","import { makeMatrix } from './utils';\r\nimport { getBoxCells, convertToMatrixIndex } from './sodukuGenerator';\r\n\r\n//check if the result is valid\r\nfunction checkArray(array) {\r\n  const length = array.length;\r\n  let marks = Array(9).fill(true);\r\n  for (let i = 0; i < length; i++) {\r\n    if (!marks[i]) continue;\r\n    const value = array[i];\r\n    if (!value) {\r\n      marks[i] = false;\r\n      continue;\r\n    }\r\n    for (let j = i + 1; j < length; j++) {\r\n      if (value === array[j]) {\r\n        marks[i] = marks[j] = false;\r\n      }\r\n    }\r\n  }\r\n  return marks;\r\n}\r\n\r\nfunction checker(matrix) {\r\n  let matrixMarks = makeMatrix(true);\r\n  let success;\r\n\r\n  function check() {\r\n    checkRows();\r\n    checkCols();\r\n    checkBoxes();\r\n    success = matrixMarks.every((row) => row.every((mark) => mark));\r\n    return success;\r\n  }\r\n\r\n  function checkRows() {\r\n    for (let i = 0; i < 9; i++) {\r\n      const row = matrix[i];\r\n      const marks = checkArray(row);\r\n      for (let j = 0; j < 9; j++) {\r\n        if (!marks[j]) {\r\n          matrixMarks[i][j] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkCols() {\r\n    for (let colIndex = 0; colIndex < 9; colIndex++) {\r\n      const cols = [];\r\n      for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n        cols[rowIndex] = matrix[rowIndex][colIndex];\r\n      }\r\n\r\n      const marks = checkArray(cols);\r\n      for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n        if (!marks[rowIndex]) {\r\n          matrixMarks[rowIndex][colIndex] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkBoxes() {\r\n    for (let boxIndex = 0; boxIndex < 9; boxIndex++) {\r\n      const box = getBoxCells(matrix, boxIndex);\r\n      const marks = checkArray(box);\r\n      for (let cellIndex = 0; cellIndex < 9; cellIndex++) {\r\n        if (!marks[cellIndex]) {\r\n          const { rowIndex, colIndex } = convertToMatrixIndex(\r\n            boxIndex,\r\n            cellIndex,\r\n          );\r\n          matrixMarks[rowIndex][colIndex] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    check,\r\n    matrixMarks,\r\n  };\r\n}\r\n\r\nexport { checker, checkArray };\r\n","import { sodukuFactory } from '../core/soduku';\r\nimport { checker } from '../core/check';\r\n\r\n/**\r\n * Function to create the soduku grid\r\n *\r\n * @param {*} container container for the soduku\r\n * @return {object}\r\n */\r\nconst grid = function(container) {\r\n  function build() {\r\n    const matrix = sodukuFactory().produce();\r\n    const rowClass = ['row-top', 'row-middle', 'row-bottom'];\r\n    const colClass = ['col-top', 'col-middle', 'col-right'];\r\n    const cells = matrix.map((row, rowIndex) => {\r\n      const rowContainer = document.createElement('div');\r\n      rowContainer.classList.add('row');\r\n      rowContainer.classList.add(rowClass[rowIndex % 3]);\r\n      row.forEach((cell, cellIndex) => {\r\n        const cellSpan = document.createElement('span');\r\n        cellSpan.classList.add(colClass[cellIndex % 3]);\r\n        cell ? cellSpan.classList.add('hint') : cellSpan.classList.add('empty');\r\n        cellSpan.innerHTML = cell;\r\n        rowContainer.appendChild(cellSpan);\r\n      });\r\n      return rowContainer;\r\n    });\r\n    cells.map((row) => {\r\n      container.appendChild(row);\r\n    });\r\n  }\r\n\r\n  function clear() {\r\n    container\r\n      .querySelectorAll('span.error')\r\n      .forEach((cell) => cell.classList.remove('error'));\r\n  }\r\n  function handleShowPop(e, popUp) {\r\n    const cell = e.target;\r\n    if (cell.classList.contains('hint')) {\r\n      return;\r\n    }\r\n    cell.classList.add('active');\r\n    popUp.show(cell);\r\n  }\r\n\r\n  function bindPopUp(popUp) {\r\n    container.addEventListener('click', (e) => handleShowPop(e, popUp));\r\n  }\r\n\r\n  function reset() {\r\n    let resetSpans = container.querySelectorAll('span:not(.hint)');\r\n    resetSpans.forEach((span) => {\r\n      span.classList.remove('error', 'mark-unsure', 'mark-good');\r\n      span.textContent = 0;\r\n      span.classList.add('empty');\r\n    });\r\n  }\r\n\r\n  function check() {\r\n    let nodeList = [...container.children].map((row) => [...row.children]);\r\n    let data = nodeList.map(\r\n      (row) => row.map((cell) => parseInt(cell.textContent)) || 0,\r\n    );\r\n    const check = checker(data);\r\n    if (check.check()) {\r\n      return true;\r\n    }\r\n    const checkMatrix = check.matrixMarks;\r\n    //mark the wrong cell\r\n    nodeList.forEach((row, rowIndex) =>\r\n      row.forEach((cell, colIndex) => {\r\n        if (\r\n          cell.classList.contains('hint') ||\r\n          checkMatrix[rowIndex][colIndex]\r\n        ) {\r\n          cell.classList.remove('error');\r\n        } else {\r\n          cell.classList.add('error');\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  return {\r\n    reset,\r\n    check,\r\n    build,\r\n    bindPopUp,\r\n    clear,\r\n  };\r\n};\r\n\r\n/**\r\n * adjust the grid layout based on the actual screen\r\n *\r\n */\r\nconst adjustLayout = () => {\r\n  const container = document.querySelector('#container');\r\n  const width = container.querySelector('span').offsetWidth;\r\n  const allSpans = container.querySelectorAll('span');\r\n  allSpans.forEach((span) => {\r\n    span.style.height = width + 'px';\r\n    span.style.lineHeight = width + 'px';\r\n  });\r\n};\r\nexport { grid, adjustLayout };\r\n","export default function popUp(popUp) {\r\n  let _cell;\r\n  function show(cell) {\r\n    popUp.classList.remove('hidden');\r\n    _cell = cell;\r\n  }\r\n\r\n  function handleFillIn(e) {\r\n    const popUpCell = e.target;\r\n    let unsureCell = _cell.classList.contains('mark-unsure');\r\n    let goodCell = _cell.classList.contains('mark-good');\r\n\r\n    const markUnsure = popUpCell.classList.contains('mark-unsure');\r\n    const markGood = popUpCell.classList.contains('mark-good');\r\n    const markEmpty = popUpCell.classList.contains('mark-empty');\r\n    //when you want to mark an cell unsure\r\n    if (markUnsure) {\r\n      if (unsureCell) {\r\n        _cell.classList.remove('mark-unsure');\r\n      } else {\r\n        goodCell && _cell.classList.remove('mark-good');\r\n        _cell.classList.add('mark-unsure');\r\n      }\r\n    }\r\n    // when you want to mark an cell good\r\n    else if (markGood) {\r\n      if (goodCell) {\r\n        _cell.classList.remove('mark-good');\r\n      } else {\r\n        unsureCell && _cell.classList.remove('mark-unsure');\r\n        _cell.classList.add('mark-good');\r\n      }\r\n    }\r\n    //clear out the content\r\n    else if (markEmpty) {\r\n      unsureCell && _cell.classList.remove('mark-unsure');\r\n      goodCell && _cell.classList.remove('mark-good');\r\n      _cell.textContent = 0;\r\n      _cell.classList.add('empty');\r\n    }\r\n    //fill in the number\r\n    else {\r\n      _cell.textContent = popUpCell.textContent;\r\n      _cell.classList.remove('empty');\r\n    }\r\n    popUp.classList.add('hidden');\r\n    _cell.classList.remove('active');\r\n  }\r\n  function bindClicks() {\r\n    popUp.addEventListener('click', handleFillIn);\r\n  }\r\n  return {\r\n    show,\r\n    bindClicks,\r\n  };\r\n}\r\n","import { grid, adjustLayout } from './layout/grid';\r\nimport popUpNumbers from './layout/popUp';\r\n\r\nconst gridContainer = document.getElementById('container');\r\nconst popUpElem = document.getElementById('popUp');\r\nconst startGame = document.querySelector('.start-button');\r\nlet sodukuBoard;\r\n\r\nconst popUp = popUpNumbers(popUpElem);\r\nconst restartBtn = document.getElementById('restart');\r\nconst checkBtn = document.getElementById('check');\r\nconst resetBtn = document.getElementById('reset');\r\nconst clearBtn = document.getElementById('clear');\r\n\r\nfunction startPlay(e, restart = false) {\r\n  if (!e.isTrusted) {\r\n    alert(\"Don't cheat dude!\");\r\n    return;\r\n  }\r\n  if (restart) gridContainer.innerHTML = null;\r\n  startGame.classList.add('hidden');\r\n  sodukuBoard = grid(gridContainer);\r\n  sodukuBoard.build();\r\n  adjustLayout();\r\n  sodukuBoard.bindPopUp(popUp);\r\n  popUp.bindClicks();\r\n}\r\n\r\nstartGame.addEventListener('click', startPlay);\r\n\r\n//bind events to the control btn\r\nrestartBtn.addEventListener('click', (e) => startPlay(e, true));\r\ncheckBtn.addEventListener('click', (e) => {\r\n  if (sodukuBoard.check()) {\r\n    alert('You are so great');\r\n    sodukuBoard.startPlay(e, true);\r\n  }\r\n  sodukuBoard.check();\r\n});\r\nresetBtn.addEventListener('click', () => {\r\n  sodukuBoard.reset();\r\n});\r\nclearBtn.addEventListener('click', () => sodukuBoard.clear());\r\n"]}