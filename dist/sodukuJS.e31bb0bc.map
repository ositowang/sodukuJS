{"version":3,"sources":["core/utils.js","core/sodukuGenerator.js","core/soduku.js","core/check.js","layout/grid.js","layout/popUp.js","index.js"],"names":["makeMatrix","v","Array","from","length","fill","shuffle","array","i","j","Math","floor","random","generateSoduku","matrix","randomColumnIndex","generate","generateSodu","console","log","map","row","n","fillNumber","fillRow","rowIndex","columns","colIndex","fillable","num","column","convertToBoxIndex","boxIndex","boxNumbers","getBoxCells","cellIndex","convertToMatrixIndex","boxStartRow","boxStartCol","result","push","sodukuFactory","solutionMatrix","puzzleMatrix","produce","difficulty","cell","checkArray","marks","value","checker","matrixMarks","success","check","checkRows","checkCols","checkBoxes","every","mark","cols","box","grid","container","build","rowClass","colClass","cells","rowContainer","document","createElement","classList","add","forEach","cellSpan","innerHTML","appendChild","clear","querySelectorAll","remove","handleShowPop","e","popUp","target","contains","show","bindPopUp","addEventListener","reset","resetSpans","span","textContent","nodeList","children","data","parseInt","checkMatrix","adjustLayout","querySelector","width","offsetWidth","allSpans","style","height","lineHeight","_cell","handleFillIn","popUpCell","unsureCell","goodCell","markUnsure","markGood","markEmpty","bindClicks","gridContainer","getElementById","popUpElem","startGame","sodukuBoard","restartBtn","checkBtn","resetBtn","clearBtn","startPlay","restart","isTrusted","alert"],"mappings":"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","file":"sodukuJS.e31bb0bc.map","sourceRoot":"..","sourcesContent":["//create a matrix representing the soduku\r\n\r\nfunction makeMatrix(v = 0) {\r\n  return Array.from({ length: 9 }, () => Array(9).fill(v));\r\n}\r\n\r\n/**\r\n * Fisher Yates shuffle algorithm\r\n * The Fisher-Yates algorithm works by picking one random element for each\r\n * original array element\r\n * @param {array} array\r\n * @returns {array} shuffled array\r\n */\r\nfunction shuffle(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nexport { makeMatrix, shuffle };\r\n","import { makeMatrix, shuffle } from './utils';\r\n\r\n/**\r\n * Function for generating the soduku with number filled\r\n *\r\n */\r\nfunction generateSoduku() {\r\n  let matrix;\r\n  let randomColumnIndex;\r\n\r\n  /**\r\n   * Entry point for generating the soduku\r\n   *\r\n   */\r\n\r\n  function generate() {\r\n    while (!generateSodu()) {\r\n      console.log('try again');\r\n    }\r\n    return matrix;\r\n  }\r\n\r\n  function generateSodu() {\r\n    matrix = makeMatrix();\r\n    randomColumnIndex = makeMatrix()\r\n      .map((row) => row.map((v, i) => i))\r\n      .map((row) => shuffle(row));\r\n    for (let n = 1; n <= 9; n++) {\r\n      if (!fillNumber(n)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * fill the empty soduku with correct number, we fill the number for each row\r\n   * with a certain number till the final row.\r\n   *\r\n   * @param {Number} n number to be filled\r\n   */\r\n  function fillNumber(n) {\r\n    return fillRow(n, 0);\r\n  }\r\n\r\n  /**\r\n   * Fill the number in a correct place in a row without repeating(in a row ,in\r\n   * a column and in a box)\r\n   *\r\n   * @param {Number} n number to fit in\r\n   * @param {Number} rowIndex the index of the row to be filled\r\n   */\r\n  function fillRow(n, rowIndex) {\r\n    // base case, we fill all the box successfully\r\n    if (rowIndex > 8) {\r\n      return true;\r\n    }\r\n\r\n    const row = matrix[rowIndex];\r\n    const columns = randomColumnIndex[rowIndex];\r\n    for (let i = 0; i < 9; i++) {\r\n      const colIndex = columns[i];\r\n      // if this column already has a number filled\r\n      if (row[colIndex]) {\r\n        continue;\r\n      }\r\n      /**\r\n       * check if we could fill n in this cell, we could fill the number in if\r\n       * there is no same number in this row,in this column and in this box\r\n       */\r\n      if (!fillable(matrix, n, rowIndex, colIndex)) {\r\n        continue;\r\n      }\r\n      //we could fill n in\r\n      row[colIndex] = n;\r\n      // if we could not fill n in the next row, we need take one step back\r\n      if (!fillRow(n, rowIndex + 1)) {\r\n        //reset the\r\n        row[colIndex] = 0;\r\n        continue;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function fillable(matrix, num, rowIndex, colIndex) {\r\n    const row = matrix[rowIndex];\r\n    const column = [0, 1, 2, 3, 4, 5, 6, 7, 8].map((v) => matrix[v][colIndex]);\r\n    const { boxIndex } = convertToBoxIndex(rowIndex, colIndex);\r\n    const boxNumbers = getBoxCells(matrix, boxIndex);\r\n    for (let i = 0; i < 9; i++) {\r\n      if (row[i] === num || column[i] === num || boxNumbers[i] === num) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return {\r\n    matrix,\r\n    generate,\r\n  };\r\n}\r\n\r\nfunction convertToBoxIndex(rowIndex, colIndex) {\r\n  return {\r\n    boxIndex: Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3),\r\n    cellIndex: (rowIndex % 3) * 3 + (colIndex % 3),\r\n  };\r\n}\r\n\r\nfunction convertToMatrixIndex(boxIndex, cellIndex) {\r\n  return {\r\n    rowIndex: Math.floor(boxIndex / 3) * 3 + Math.floor(cellIndex / 3),\r\n    colIndex: (boxIndex % 3) * 3 + (cellIndex % 3),\r\n  };\r\n}\r\n\r\nfunction getBoxCells(matrix, boxIndex) {\r\n  const boxStartRow = Math.floor(boxIndex / 3) * 3;\r\n  const boxStartCol = (boxIndex % 3) * 3;\r\n  let result = [];\r\n  for (let i = 0; i < 9; i++) {\r\n    let rowIndex = boxStartRow + Math.floor(i / 3);\r\n    let colIndex = boxStartCol + (i % 3);\r\n    result.push(matrix[rowIndex][colIndex]);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport { generateSoduku, getBoxCells, convertToMatrixIndex };\r\n","import { generateSoduku } from './sodukuGenerator';\r\n\r\nfunction sodukuFactory() {\r\n  let solutionMatrix = generateSoduku().generate();\r\n  let puzzleMatrix;\r\n\r\n  function produce(difficulty = 5) {\r\n    puzzleMatrix = solutionMatrix.map((row) => {\r\n      return row.map((cell) => {\r\n        return Math.random() * 9 < difficulty ? 0 : cell;\r\n      });\r\n    });\r\n    return puzzleMatrix;\r\n  }\r\n\r\n  return {\r\n    produce,\r\n  };\r\n}\r\n\r\nexport { sodukuFactory };\r\n","import { makeMatrix } from './utils';\r\nimport { getBoxCells, convertToMatrixIndex } from './sodukuGenerator';\r\n\r\n//check if the result is valid\r\nfunction checkArray(array) {\r\n  const length = array.length;\r\n  let marks = Array(9).fill(true);\r\n  for (let i = 0; i < length; i++) {\r\n    if (!marks[i]) continue;\r\n    const value = array[i];\r\n    if (!value) {\r\n      marks[i] = false;\r\n      continue;\r\n    }\r\n    for (let j = i + 1; j < length; j++) {\r\n      if (value === array[j]) {\r\n        marks[i] = marks[j] = false;\r\n      }\r\n    }\r\n  }\r\n  return marks;\r\n}\r\n\r\nfunction checker(matrix) {\r\n  let matrixMarks = makeMatrix(true);\r\n  let success;\r\n\r\n  function check() {\r\n    checkRows();\r\n    checkCols();\r\n    checkBoxes();\r\n    success = matrixMarks.every((row) => row.every((mark) => mark));\r\n    return success;\r\n  }\r\n\r\n  function checkRows() {\r\n    for (let i = 0; i < 9; i++) {\r\n      const row = matrix[i];\r\n      const marks = checkArray(row);\r\n      for (let j = 0; j < 9; j++) {\r\n        if (!marks[j]) {\r\n          matrixMarks[i][j] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkCols() {\r\n    for (let colIndex = 0; colIndex < 9; colIndex++) {\r\n      const cols = [];\r\n      for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n        cols[rowIndex] = matrix[rowIndex][colIndex];\r\n      }\r\n\r\n      const marks = checkArray(cols);\r\n      for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n        if (!marks[rowIndex]) {\r\n          matrixMarks[rowIndex][colIndex] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkBoxes() {\r\n    for (let boxIndex = 0; boxIndex < 9; boxIndex++) {\r\n      const box = getBoxCells(matrix, boxIndex);\r\n      const marks = checkArray(box);\r\n      for (let cellIndex = 0; cellIndex < 9; cellIndex++) {\r\n        if (!marks[cellIndex]) {\r\n          const { rowIndex, colIndex } = convertToMatrixIndex(\r\n            boxIndex,\r\n            cellIndex,\r\n          );\r\n          matrixMarks[rowIndex][colIndex] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    check,\r\n    matrixMarks,\r\n  };\r\n}\r\n\r\nexport { checker, checkArray };\r\n","import { sodukuFactory } from '../core/soduku';\r\nimport { checker } from '../core/check';\r\n\r\n/**\r\n * Function to create the soduku grid\r\n *\r\n * @param {*} container container for the soduku\r\n * @return {object}\r\n */\r\nconst grid = function(container) {\r\n  function build() {\r\n    const matrix = sodukuFactory().produce();\r\n    const rowClass = ['row-top', 'row-middle', 'row-bottom'];\r\n    const colClass = ['col-top', 'col-middle', 'col-right'];\r\n    const cells = matrix.map((row, rowIndex) => {\r\n      const rowContainer = document.createElement('div');\r\n      rowContainer.classList.add('row');\r\n      rowContainer.classList.add(rowClass[rowIndex % 3]);\r\n      row.forEach((cell, cellIndex) => {\r\n        const cellSpan = document.createElement('span');\r\n        cellSpan.classList.add(colClass[cellIndex % 3]);\r\n        cell ? cellSpan.classList.add('hint') : cellSpan.classList.add('empty');\r\n        cellSpan.innerHTML = cell;\r\n        rowContainer.appendChild(cellSpan);\r\n      });\r\n      return rowContainer;\r\n    });\r\n    cells.map((row) => {\r\n      container.appendChild(row);\r\n    });\r\n  }\r\n\r\n  function clear() {\r\n    container\r\n      .querySelectorAll('span.error')\r\n      .forEach((cell) => cell.classList.remove('error'));\r\n  }\r\n  function handleShowPop(e, popUp) {\r\n    const cell = e.target;\r\n    if (cell.classList.contains('hint')) {\r\n      return;\r\n    }\r\n    cell.classList.add('active');\r\n    popUp.show(cell);\r\n  }\r\n\r\n  function bindPopUp(popUp) {\r\n    container.addEventListener('click', (e) => handleShowPop(e, popUp));\r\n  }\r\n\r\n  function reset() {\r\n    let resetSpans = container.querySelectorAll('span:not(.hint)');\r\n    resetSpans.forEach((span) => {\r\n      span.classList.remove('error', 'mark-unsure', 'mark-good');\r\n      span.textContent = 0;\r\n      span.classList.add('empty');\r\n    });\r\n  }\r\n\r\n  function check() {\r\n    let nodeList = [...container.children].map((row) => [...row.children]);\r\n    let data = nodeList.map(\r\n      (row) => row.map((cell) => parseInt(cell.textContent)) || 0,\r\n    );\r\n    const check = checker(data);\r\n    if (check.check()) {\r\n      return true;\r\n    }\r\n    const checkMatrix = check.matrixMarks;\r\n    //mark the wrong cell\r\n    nodeList.forEach((row, rowIndex) =>\r\n      row.forEach((cell, colIndex) => {\r\n        if (\r\n          cell.classList.contains('hint') ||\r\n          checkMatrix[rowIndex][colIndex]\r\n        ) {\r\n          cell.classList.remove('error');\r\n        } else {\r\n          cell.classList.add('error');\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  return {\r\n    reset,\r\n    check,\r\n    build,\r\n    bindPopUp,\r\n    clear,\r\n  };\r\n};\r\n\r\n/**\r\n * adjust the grid layout based on the actual screen\r\n *\r\n */\r\nconst adjustLayout = () => {\r\n  const container = document.querySelector('#container');\r\n  const width = container.querySelector('span').offsetWidth;\r\n  const allSpans = container.querySelectorAll('span');\r\n  allSpans.forEach((span) => {\r\n    span.style.height = width + 'px';\r\n    span.style.lineHeight = width + 'px';\r\n  });\r\n};\r\nexport { grid, adjustLayout };\r\n","export default function popUp(popUp) {\r\n  let _cell;\r\n  function show(cell) {\r\n    popUp.classList.remove('hidden');\r\n    _cell = cell;\r\n  }\r\n\r\n  function handleFillIn(e) {\r\n    const popUpCell = e.target;\r\n    let unsureCell = _cell.classList.contains('mark-unsure');\r\n    let goodCell = _cell.classList.contains('mark-good');\r\n\r\n    const markUnsure = popUpCell.classList.contains('mark-unsure');\r\n    const markGood = popUpCell.classList.contains('mark-good');\r\n    const markEmpty = popUpCell.classList.contains('mark-empty');\r\n    //when you want to mark an cell unsure\r\n    if (markUnsure) {\r\n      if (unsureCell) {\r\n        _cell.classList.remove('mark-unsure');\r\n      } else {\r\n        goodCell && _cell.classList.remove('mark-good');\r\n        _cell.classList.add('mark-unsure');\r\n      }\r\n    }\r\n    // when you want to mark an cell good\r\n    else if (markGood) {\r\n      if (goodCell) {\r\n        _cell.classList.remove('mark-good');\r\n      } else {\r\n        unsureCell && _cell.classList.remove('mark-unsure');\r\n        _cell.classList.add('mark-good');\r\n      }\r\n    }\r\n    //clear out the content\r\n    else if (markEmpty) {\r\n      unsureCell && _cell.classList.remove('mark-unsure');\r\n      goodCell && _cell.classList.remove('mark-good');\r\n      _cell.textContent = 0;\r\n      _cell.classList.add('empty');\r\n    }\r\n    //fill in the number\r\n    else {\r\n      _cell.textContent = popUpCell.textContent;\r\n      _cell.classList.remove('empty');\r\n    }\r\n    popUp.classList.add('hidden');\r\n    _cell.classList.remove('active');\r\n  }\r\n  function bindClicks() {\r\n    popUp.addEventListener('click', handleFillIn);\r\n  }\r\n  return {\r\n    show,\r\n    bindClicks,\r\n  };\r\n}\r\n","import { grid, adjustLayout } from './layout/grid';\r\nimport popUpNumbers from './layout/popUp';\r\n\r\nconst gridContainer = document.getElementById('container');\r\nconst popUpElem = document.getElementById('popUp');\r\nconst startGame = document.querySelector('.start-button');\r\nlet sodukuBoard;\r\n\r\nconst popUp = popUpNumbers(popUpElem);\r\nconst restartBtn = document.getElementById('restart');\r\nconst checkBtn = document.getElementById('check');\r\nconst resetBtn = document.getElementById('reset');\r\nconst clearBtn = document.getElementById('clear');\r\n\r\nfunction startPlay(e, restart = false) {\r\n  if (!e.isTrusted) {\r\n    alert(\"Don't cheat dude!\");\r\n    return;\r\n  }\r\n  if (restart) gridContainer.innerHTML = null;\r\n  startGame.classList.add('hidden');\r\n  sodukuBoard = grid(gridContainer);\r\n  sodukuBoard.build();\r\n  adjustLayout();\r\n  sodukuBoard.bindPopUp(popUp);\r\n  popUp.bindClicks();\r\n}\r\n\r\nstartGame.addEventListener('click', startPlay);\r\n\r\n//bind events to the control btn\r\nrestartBtn.addEventListener('click', (e) => startPlay(e, true));\r\ncheckBtn.addEventListener('click', () => {\r\n  if (sodukuBoard.check()) {\r\n    alert('You are so great');\r\n  }\r\n  sodukuBoard.check();\r\n});\r\nresetBtn.addEventListener('click', () => {\r\n  sodukuBoard.reset();\r\n});\r\nclearBtn.addEventListener('click', () => sodukuBoard.clear());\r\n"]}